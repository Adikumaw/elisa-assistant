### Step 1: Install Specific Python Versions

```bash
pyenv install 3.12.2
pyenv install 3.10.12
pyenv install 3.9.18
```

### Step 2: Create Virtual Environment for Project

```bash
pyenv virtualenv 3.9.18 rasa-env
pyenv virtualenv 3.10.12 otherproject-env
```

### Step 3: Activate Virtual Environment

```bash
pyenv activate rasa-env
# Now python --version shows 3.12.2
```

Deactivate with:

```bash
pyenv deactivate
```

âœ… **Benefits:**

* Isolated Python versions for each project.
* No system Python modifications.
* Works even if direct pip install is restrictedâ€”pyenv handles pip inside virtualenv.

---

# **2. Handling pip Restrictions on Arch Linux**

Arch Linux generally **discourages using `sudo pip install`** because it can break system packages. Best practices:

1. **Inside pyenv virtualenv**:

   * `pip` is allowed because it installs in your virtual environment, **not system-wide**.

   ```bash
   pyenv activate myproject-env
   pip install flask requests
   ```
2. **Avoid using `sudo pip`** for global packages.
3. **Alternative for system-wide packages**: Use Arch packages via pacman:

   ```bash
   sudo pacman -S python-flask python-requests
   ```

   But this is less flexible than a virtualenv.

---

# **4. Recommended Workflow**

1. Install `pyenv` â†’ manage multiple Python versions.
2. Create a **virtualenv for each project**:

   ```bash
   pyenv virtualenv 3.12.2 myproject-env
   pyenv activate myproject-env
   ```
3. Install project dependencies using **local pip** inside the virtualenv.
4. For deployment, create a **Docker image** specifying the required Python version.
5. Use `requirements.txt` to sync dependencies between local and Docker.

---

ðŸ’¡ **Extra Tip:** You can automate virtualenv activation per project using `.python-version`:

```bash
echo "myproject-env" > .python-version
# pyenv auto-activates the correct env when you cd into the folder
```

---